{"remainingRequest":"/Users/moushumekhatoon/Desktop/tasks/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/moushumekhatoon/Desktop/tasks/portfolio/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/moushumekhatoon/Desktop/tasks/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/moushumekhatoon/Desktop/tasks/portfolio/src/views/Projects.vue?vue&type=template&id=6cfeddb4&scoped=true&","dependencies":[{"path":"/Users/moushumekhatoon/Desktop/tasks/portfolio/src/views/Projects.vue","mtime":1655696106277},{"path":"/Users/moushumekhatoon/Desktop/tasks/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655652264969},{"path":"/Users/moushumekhatoon/Desktop/tasks/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655652265564},{"path":"/Users/moushumekhatoon/Desktop/tasks/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655652264969},{"path":"/Users/moushumekhatoon/Desktop/tasks/portfolio/node_modules/vue-loader/lib/index.js","mtime":1655652265383}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}